generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id  String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String  @default("")
  username String  @unique @default("")
  password String? @db.VarChar

  userOnBusiness UserOnBusiness[]
}

model Business {
  business_id   String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_name String? @db.VarChar

  userOnBusiness UserOnBusiness[]
  shopify        Shopify[]
}

model UserOnBusiness {
  user        User     @relation(fields: [user_id], references: [user_id])
  user_id     String   @db.Uuid
  business    Business @relation(fields: [business_id], references: [business_id])
  business_id String   @db.Uuid
  role        String   @db.VarChar
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([user_id, business_id])
}

model Shopify {
  shopify_id             String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shopify_api_key        String? @db.VarChar
  shopify_api_secret_key String? @db.VarChar
  shopify_merchant_link  String? @db.VarChar
  shopify_name           String? @db.VarChar
  shopify_url            String  @unique @db.VarChar
  access_token           String  @unique @db.VarChar
  currency_code          String?

  orders         Order[]
  daily_insights Daily_insight[]

  business    Business @relation(fields: [business_id], references: [business_id], onDelete: Cascade)
  business_id String   @db.Uuid
}

model Daily_insight {
  created_at           DateTime @db.Timestamp(6)
  total_sales_amount   Int?
  total_refunds_amount Int?
  shopify              Shopify  @relation(fields: [shopify_id], references: [shopify_id], onDelete: Cascade)
  shopify_id           String   @db.Uuid

  @@id([created_at, shopify_id])
}

model Order {
  order_id                String    @id @unique @db.VarChar
  order_created_at        DateTime? @db.Timestamp(6)
  order_payment_status    String?   @db.VarChar
  order_fulfilment_status String?   @db.VarChar
  total_discount_amount   Int?
  order_total_price       Int?
  order_total_received    Int?
  order_total_refunded    Int?
  order_net_payment       Int? // total amount received - total amount refunded

  shopify_id String  @db.Uuid
  shopify    Shopify @relation(fields: [shopify_id], references: [shopify_id], onDelete: Cascade)

  transactions Transaction[]
}

model Transaction {
  transaction_id          String    @id @unique @db.VarChar
  transaction_created_at  DateTime? @db.Timestamp(6)
  transaction_kind        String?   @db.VarChar
  transaction_status      String?   @db.VarChar
  transaction_shop_amount Int?

  order    Order  @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  order_id String @db.VarChar
}
